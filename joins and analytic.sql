
-- SELECT 
--     c.CUST_ID,
--     c.CUST_FIRST_NAME || ' ' || c.CUST_LAST_NAME AS CUSTOMER_NAME,
--     c.COUNTRY_ID,
--     SUM(s.AMOUNT_SOLD) AS TOTAL_SALES,
--     RANK() OVER (PARTITION BY c.COUNTRY_ID ORDER BY SUM(s.AMOUNT_SOLD) DESC) AS COUNTRY_RANK
-- FROM SH.CUSTOMERS c
-- JOIN SH.SALES s ON c.CUST_ID = s.CUST_ID
-- GROUP BY c.CUST_ID, c.CUST_FIRST_NAME, c.CUST_LAST_NAME, c.COUNTRY_ID
-- ORDER BY COUNTRY_ID, COUNTRY_RANK;


-- WITH COUNTRY_AVG AS (
--     SELECT 
--         c.COUNTRY_ID,
--         AVG(s.AMOUNT_SOLD) AS AVG_SALES
--     FROM SH.CUSTOMERS c
--     JOIN SH.SALES s ON c.CUST_ID = s.CUST_ID
--     GROUP BY c.COUNTRY_ID
-- )
-- SELECT 
--     c.CUST_ID,
--     c.CUST_FIRST_NAME || ' ' || c.CUST_LAST_NAME AS CUSTOMER_NAME,
--     SUM(s.AMOUNT_SOLD) AS TOTAL_SALES,
--     c.COUNTRY_ID
-- FROM SH.CUSTOMERS c
-- JOIN SH.SALES s ON c.CUST_ID = s.CUST_ID
-- JOIN COUNTRY_AVG ca ON c.COUNTRY_ID = ca.COUNTRY_ID
-- GROUP BY c.CUST_ID, c.CUST_FIRST_NAME, c.CUST_LAST_NAME, c.COUNTRY_ID, ca.AVG_SALES
-- HAVING SUM(s.AMOUNT_SOLD) > ca.AVG_SALES
-- ORDER BY TOTAL_SALES DESC;

-- SELECT *
-- FROM (
--     SELECT 
--         c.CUST_ID,
--         c.CUST_FIRST_NAME || ' ' || c.CUST_LAST_NAME AS CUSTOMER_NAME,
--         c.CUST_STATE_PROVINCE,
--         SUM(s.AMOUNT_SOLD) AS TOTAL_SALES,
--         RANK() OVER (PARTITION BY c.CUST_STATE_PROVINCE ORDER BY SUM(s.AMOUNT_SOLD) DESC) AS STATE_RANK
--     FROM SH.CUSTOMERS c
--     JOIN SH.SALES s ON c.CUST_ID = s.CUST_ID
--     GROUP BY c.CUST_ID, c.CUST_FIRST_NAME, c.CUST_LAST_NAME, c.CUST_STATE_PROVINCE
-- )
-- WHERE STATE_RANK <= 3
-- ORDER BY CUST_STATE_PROVINCE, STATE_RANK;


-- SELECT 
--     c.CUST_ID,
--     c.CUST_FIRST_NAME || ' ' || c.CUST_LAST_NAME AS CUSTOMER_NAME,
--     c.COUNTRY_ID,
--     SUM(s.QUANTITY_SOLD) AS TOTAL_QUANTITY,
--     RANK() OVER (PARTITION BY c.COUNTRY_ID ORDER BY SUM(s.QUANTITY_SOLD) DESC) AS QUANTITY_RANK
-- FROM SH.CUSTOMERS c
-- JOIN SH.SALES s ON c.CUST_ID = s.CUST_ID
-- GROUP BY c.CUST_ID, c.CUST_FIRST_NAME, c.CUST_LAST_NAME, c.COUNTRY_ID
-- ORDER BY COUNTRY_ID, QUANTITY_RANK;


-- SELECT 
--     c.CUST_ID,
--     c.CUST_FIRST_NAME || ' ' || c.CUST_LAST_NAME AS CUSTOMER_NAME,
--     c.COUNTRY_ID,
--     SUM(s.AMOUNT_SOLD) AS TOTAL_SALES,
--     SUM(s.AMOUNT_SOLD) / SUM(SUM(s.AMOUNT_SOLD)) OVER (PARTITION BY c.COUNTRY_ID) * 100 AS PERCENT_CONTRIBUTION
-- FROM SH.CUSTOMERS c
-- JOIN SH.SALES s ON c.CUST_ID = s.CUST_ID
-- GROUP BY c.CUST_ID, c.CUST_FIRST_NAME, c.CUST_LAST_NAME, c.COUNTRY_ID
-- ORDER BY COUNTRY_ID, PERCENT_CONTRIBUTION DESC;


-- WITH MONTHLY_SALES AS (
--     SELECT 
--         c.CUST_ID,
--         TRUNC(s.TIME_ID, 'MM') AS SALES_MONTH,
--         SUM(s.AMOUNT_SOLD) AS TOTAL_SALES
--     FROM SH.CUSTOMERS c
--     JOIN SH.SALES s ON c.CUST_ID = s.CUST_ID
--     GROUP BY c.CUST_ID, TRUNC(s.TIME_ID, 'MM')
-- )
-- SELECT 
--     curr.CUST_ID,
--     curr.TOTAL_SALES AS THIS_MONTH_SALES,
--     prev.TOTAL_SALES AS LAST_MONTH_SALES
-- FROM MONTHLY_SALES curr
-- JOIN MONTHLY_SALES prev 
--     ON curr.CUST_ID = prev.CUST_ID 
--    AND ADD_MONTHS(prev.SALES_MONTH, 1) = curr.SALES_MONTH
-- WHERE curr.TOTAL_SALES < prev.TOTAL_SALES;


-- SELECT 
--     c.CUST_ID,
--     c.CUST_FIRST_NAME || ' ' || c.CUST_LAST_NAME AS CUSTOMER_NAME
-- FROM SH.CUSTOMERS c
-- LEFT JOIN SH.SALES s ON c.CUST_ID = s.CUST_ID
-- WHERE s.CUST_ID IS NULL;


-- SELECT 
--     CORR(c.CUST_CREDIT_LIMIT, NVL(sales.TOTAL_SALES,0)) AS CREDIT_SALES_CORR
-- FROM SH.CUSTOMERS c
-- LEFT JOIN (
--     SELECT CUST_ID, SUM(AMOUNT_SOLD) AS TOTAL_SALES
--     FROM SH.SALES
--     GROUP BY CUST_ID
-- ) sales ON c.CUST_ID = sales.CUST_ID;

-- WITH MONTHLY_SALES AS (
--     SELECT 
--         c.CUST_ID,
--         TRUNC(s.TIME_ID, 'MM') AS SALES_MONTH,
--         SUM(s.AMOUNT_SOLD) AS TOTAL_SALES
--     FROM SH.CUSTOMERS c
--     JOIN SH.SALES s ON c.CUST_ID = s.CUST_ID
--     GROUP BY c.CUST_ID, TRUNC(s.TIME_ID, 'MM')
-- )
-- SELECT 
--     CUST_ID,
--     SALES_MONTH,
--     TOTAL_SALES,
--     AVG(TOTAL_SALES) OVER (
--         PARTITION BY CUST_ID 
--         ORDER BY SALES_MONTH 
--         ROWS BETWEEN 2 PRECEDING AND CURRENT ROW
--     ) AS MOVING_AVG_3_MONTHS
-- FROM MONTHLY_SALES
-- ORDER BY CUST_ID, SALES_MONTH;


